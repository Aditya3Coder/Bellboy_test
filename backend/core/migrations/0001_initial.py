# Generated by Django 5.0.4 on 2024-04-22 14:38

import core.models
import core.utils
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('email', models.EmailField(max_length=254)),
                ('contact', models.TextField()),
                ('passport_file', models.FileField(upload_to=core.models.upload_to)),
            ],
        ),
        migrations.CreateModel(
            name='Snippet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=20)),
                ('Address', models.TextField(max_length=20)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.TextField(choices=[('OWNER', 'OWNER'), ('PARTNER', 'PARTNER')], default='OWNER')),
                ('contact', models.TextField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('door_key', models.CharField(max_length=20, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('checkin_time', models.TimeField()),
                ('checkout_time', models.TimeField()),
                ('deposit_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('status', models.TextField(choices=[('UPCOMING', 'UPCOMING'), ('ACTIVE', 'ACTIVE'), ('AWAITING_CLEANING', 'AWAITING_CLEANING'), ('COMPLETED', 'COMPLETED'), ('CANCELLED', 'CANCELLED')], default='UPCOMING')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='core.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_satisfaction', models.CharField(choices=[('Very Satisfied', 'Very Satisfied'), ('Satisfied', 'Satisfied'), ('Neutral', 'Neutral'), ('Dissatisfied', 'Dissatisfied'), ('Very Dissatisfied', 'Very Dissatisfied')], max_length=20)),
                ('cleanliness', models.CharField(choices=[('Excellent', 'Excellent'), ('Good', 'Good'), ('Average', 'Average'), ('Poor', 'Poor'), ('Very Poor', 'Very Poor')], max_length=20)),
                ('communication', models.CharField(choices=[('Excellent', 'Excellent'), ('Good', 'Good'), ('Average', 'Average'), ('Poor', 'Poor'), ('Very Poor', 'Very Poor')], max_length=20)),
                ('service_quality', models.CharField(choices=[('Excellent', 'Excellent'), ('Good', 'Good'), ('Average', 'Average'), ('Poor', 'Poor'), ('Very Poor', 'Very Poor')], max_length=20)),
                ('value_for_money', models.CharField(choices=[('Excellent', 'Excellent'), ('Good', 'Good'), ('Average', 'Average'), ('Poor', 'Poor'), ('Very Poor', 'Very Poor')], max_length=20)),
                ('comments', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='core.booking')),
            ],
        ),
        migrations.CreateModel(
            name='LateCheckOutRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_end_date', models.DateField()),
                ('requested_end_date', models.DateField()),
                ('original_checkout_time', models.TimeField()),
                ('requested_checkout_time', models.TimeField()),
                ('status', models.TextField(choices=[('REQUESTED', 'REQUESTED'), ('AWAITING_PARTNER_CLEARANCE', 'AWAITING_PARTNER_CLEARANCE'), ('DECLINED', 'DECLINED'), ('APPROVED', 'APPROVED')], default='REQUESTED')),
                ('job_status', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='check_out_request', to='core.booking')),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('gmaps_link', models.TextField(validators=[core.utils._validate_gmaps_link])),
                ('neighbourhood', models.TextField()),
                ('building_name', models.TextField()),
                ('apt_number', models.TextField()),
                ('num_bedrooms', models.IntegerField()),
                ('num_cleaners', models.IntegerField()),
                ('num_cleaning_hours', models.DecimalField(decimal_places=1, max_digits=2)),
                ('default_checkin_time', models.TimeField()),
                ('default_checkout_time', models.TimeField()),
                ('default_deposit_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('agent_name', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL)),
                ('partner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='partner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Properties',
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='property',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='core.property'),
        ),
    ]
